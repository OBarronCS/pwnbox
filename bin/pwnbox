#!/usr/bin/env python3

import argparse
import json
import subprocess
import os
from pathlib import Path
import sys
import pathlib
import configparser
# This import messes with terminal settings, makes cursor disappear
# from pwn import *

# context.terminal = ['tmux', 'splitw', '-h', '-l', '75%']
# CONTAINER_REGISTRY = "ghcr.io/obarroncs"
# CONTAINER_NAME = "pwnbox"

DEFAULT_IMAGE = "ghcr.io/obarroncs/pwnbox"
DEFAULT_TAG = "latest"
DEFAULT_IMAGE_AND_TAG = f"{DEFAULT_IMAGE}:{DEFAULT_TAG}"

CONFIG_FILE_NAME = ".pwnbox.conf"
CONFIG_FILE_PATH = Path.home() / CONFIG_FILE_NAME

BASE_DIRECTORY = Path(os.path.dirname(os.path.abspath(__file__))).parent.absolute()

def main():

    parser = argparse.ArgumentParser(
        description="Command line interface for pwnbox"
    )

    toplevel_parser = parser.add_subparsers(dest="command", help="Sub-commands")

    # Create
    create_parser = toplevel_parser.add_parser("create")
    create_parser.add_argument("name")
    create_parser.add_argument("--image", dest="image", default=None, required=False, help="Choose image")

    # Enter
    enter_parser = toplevel_parser.add_parser("enter")
    enter_parser.add_argument("name")

    # Remove
    remove_parser = toplevel_parser.add_parser("remove",aliases=["rm","kill"])
    remove_parser.add_argument("name")

    # Debug
    remove_parser = toplevel_parser.add_parser("gdb",aliases=["debug"])
    remove_parser.add_argument("name")

    # Temp
    remove_parser = toplevel_parser.add_parser("temp",aliases=["tmp"])
    remove_parser.add_argument("--image", dest="image", default=None, required=False, help="Choose image")

    # Pull
    pull_parser = toplevel_parser.add_parser("pull")

    # Config
    config_parser = toplevel_parser.add_parser("config", description="Set config settings")
    config_subparsers = config_parser.add_subparsers(dest="config_subcommand")
    # Config show
    config_show_parser = config_subparsers.add_parser("show")
    # Config set
    config_set_parser = config_subparsers.add_parser("set")
    config_set_parser.add_argument("--image", dest="image", default=None, required=False, help="Set default image")
    config_set_parser.add_argument("--use-slim", dest="use_slim", action="store_true", default=False, required=False, help="Use slim version of default image")
    config_set_parser.add_argument("--use-full", dest="use_full", action="store_true", default=None, required=False, help="Use full version of default image")

    
    
    # List
    list_parser = toplevel_parser.add_parser("list",aliases=["ls"])

    # Update
    update_parser = toplevel_parser.add_parser("update",aliases=["upgrade"])

    """
    User qemu to attach to a binary.
    """

    # Parse arguments
    args = parser.parse_args()


    if args.command == "create":
        create(args.name, args.image)
    elif args.command == "enter":
        enter(args.name)
    elif args.command in {"remove","rm","kill"}:
        remove(args.name)
    elif args.command in {"gdb","debug"}:
        debug_command(args.name)
    elif args.command in {"temp","tmp"}:
        temp(args.image)
    elif args.command in {"list","ls"}:
        list_command()
    elif args.command == "pull":
        pull()
    elif args.command == "config":
        config(args)
    elif args.command in {"update", "upgrade"}:
        update()
    else:
        print("Unknown command")
        parser.print_help()


def get_image_name(image: str | None) -> str:
    """
    Return the image that will be used on the next `pwnbox create`.
    """
    if image is not None:
        return image
    else:
        config = configparser.ConfigParser()
        try:
            with open(CONFIG_FILE_PATH) as f:
                config.read_file(f)
                image = config["config"]["image"]
                return image
        except:
            # Use the default name, in this case
            image = DEFAULT_IMAGE_AND_TAG
            # test = subprocess.run(
            #     [
            #         "docker",
            #         "image",
            #         "inspect",
            #         f"{image}"
            #     ],
            #     stdout=subprocess.PIPE,
            #     stderr=subprocess.PIPE,
            # )

            # if test.returncode != 0:
            #     print(f"Pulling image '{image}'")
            #     pull()
            
            return image
        


def create(name: str, image: str | None):

    test = subprocess.run(
        [
            "docker",
            "container",
            "inspect",
            f"{name}"
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    if test.returncode == 0:
        print(f"A docker container with name '{name}' already exists")
        sys.exit(1)

    image = get_image_name(image)

    print(f"Creating pwnbox with image '{image}'")

    hostname = f"pwnbox-{name}"
    result = subprocess.run(
        [
            "docker",
            "run",
            "--privileged",
            "-it",
            "--network", "host",
            "--hostname", hostname,
            "--add-host",f"{hostname}=127.0.0.1",
            "-u", f"{os.getuid()}:{os.getgid()}",
            "-d",
            "-w", "/mount/",
            "-v", f"{os.getcwd()}:/mount/",
            "--name", f"{name}",
            image,
            "/bin/bash",
        ]
    )

    enter(name)


def enter(name: str):

    test = subprocess.run(
        [
            "docker",
            "container",
            "inspect",
            f"{name}"
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    if test.returncode != 0:
        print(f"A docker container with name '{name}' does not exists")
        sys.exit(1)
    
    docker_info = json.loads(test.stdout)

    running = docker_info[0]["State"]["Running"]

    if not running:
        subprocess.run(
            [
                "docker",
                "container",
                "start",
                f"{name}"
            ]
        )

    mount_info = docker_info[0]["Mounts"][0]
    host_dir = mount_info["Source"]

    host_path = pathlib.Path(host_dir).resolve()
    cwd_path = pathlib.Path(os.getcwd()).resolve()

    rel = ""
    try:
        rel = cwd_path.relative_to(host_path)
    except ValueError:
        pass

    result = subprocess.run(
        [
            "docker",
            "exec",
            "-it",
            "-w", f"/mount/{rel}",
            f"{name}",
            "/bin/bash"
        ]
    )

def remove(name: str):
    print(f"Deleting container '{name}'")

    result = subprocess.run(
        [
            "docker",
            "kill",
            f"{name}",
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    if b" is not running" in result.stderr:
        pass

    result = subprocess.run(
        [
            "docker",
            "container",
            "rm",
            f"{name}",
        ]
    )


def temp(image: str | None):
    image = get_image_name(image)
    hostname = "tmp-pwnbox"
    result = subprocess.run(
        [
            "docker",
            "run",
            "--privileged",
            "-it",
            "--rm",
            "--network", "host",
            "--hostname", hostname,
            "--add-host",f"{hostname}=127.0.0.1",
            "-u", f"{os.getuid()}:{os.getgid()}",
            "-w", "/mount/",
            "-v", f"{os.getcwd()}:/mount/",
            image,
            "/bin/bash",
        ]
    )

def pull():

    current_image = get_image_name(None)
    if current_image.endswith("full"):
        subprocess.run(
            [
                "docker",
                "pull",
                f"{DEFAULT_IMAGE}:full"
            ]
        )
    else:
        subprocess.run(
            [
                "docker",
                "pull",
                f"{DEFAULT_IMAGE}:latest"
            ]
        )


def config(args):
    if args.config_subcommand == "show":
        print_config()
    elif args.config_subcommand == "set":
        # Look for things to set
        image = args.image
        use_slim = args.use_slim
        use_full = args.use_full

        config = configparser.ConfigParser()

        config.read(CONFIG_FILE_PATH)

        try:
            config.add_section("config")
        except configparser.DuplicateSectionError:
            pass

        if use_slim:
            config["config"]["image"] = f"{DEFAULT_IMAGE}"
        elif use_full:
            config["config"]["image"] = f"{DEFAULT_IMAGE}:full"
        elif image:
            config["config"]["image"] = args.image

        with open(CONFIG_FILE_PATH, "w") as f:
            config.write(f)
        
        print("Config file modified\n")
        print_config()


    else:
        print(f"Location of config file: {CONFIG_FILE_PATH}")


def print_config():
    if os.path.isfile(CONFIG_FILE_PATH):
        os.system(f"cat {CONFIG_FILE_PATH}")
    else:
        print("Config file not yet created")
        print(f"Default image: {DEFAULT_IMAGE_AND_TAG}")


def update():
    print("Running 'git pull' to get latest version")
    os.system(f"cd {BASE_DIRECTORY} && git pull")

def debug_command(name: str):
    """
    Option 1:
        Mount the current working directory in a new instance of the docker that just is running qemu.
        Just mount one single port. Then connect to gdb on that port.
        -- Option to use an existing container

        This will use the outside gdb

        Is python bundled with the gdb? idk

        Could we just mount the pwndbg folder? Would this cause issues with the python venv?

    Option 2:
        Do all of it in the container:

        given a path to a file and an arch, compile, attach, and do the whole split thing.
        In this case, pwndbg is the one that is inside the container

        This is much much easier to do.

        In my "shellcode" script I should have it able to do this

        Make notes that it assumes that all the contents are in the _start function
        
    https://github.com/Gallopsled/pwntools/blob/736cf9d11229c9d7518c88d0d56ecbf28b3e505a/pwnlib/gdb.py#L891
    """
    cmd = ['gdb', '-q']


    # TODO: Mount the cwd, and we are given the path to the file
    # Read that file, compile it into the current working directory
    # TODO: make a seperate "cross arch compile" command?
    # run_in_new_terminal([
    #     "docker",
    #     "run",
    #     "--privileged",
    #     "-it",
    #     "--rm",
    #     "--network", "host",
    #     "-u", f"{os.getuid()}:{os.getgid()}",
    #     "-w", "/mount/",
    #     "-v", f"{os.getcwd()}:/mount/",
    #     image,
    #     "/bin/bash",
    # ])

    # subprocess.Popen([
    #     f"qemu-{name}",
    #     "-g", "1234",
    #     f"{name}"
    # ])

    # os.system("tmux splitw -F '#{pane_id}' -P " + f"'gdb -q '")

def list_command():

    # List all containers started with this script
    # We need to do some simple detection
    # docker inspect --format '{{.Name}} {{.Config.Image}}'
    # Also can do a check that a mount or something exists
    # Find some metric to read
    # Maybe the /mount folder?
    result = subprocess.run(
        [
            "docker",
            "ps",
            "-a",
            "-q",
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )


    containers = [x.decode("utf-8") for x in result.stdout.split(b"\n")]

    filter_command: list[str] = []
    for id in containers:
        # Empty lines
        if not id:
            continue

        result = subprocess.run(
            [
                "docker",
                "inspect",
                str(id)
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
    
        docker_info = json.loads(result.stdout)
        mounts = docker_info[0]["Mounts"]
        if not mounts:
            continue

        mount_info = mounts[0]
        destination = mount_info["Destination"]

        network_mode = docker_info[0]["HostConfig"]["NetworkMode"]

        if destination == "/mount" and network_mode == "host":
            filter_command += ["--filter", f'id={id}']

    
    if filter_command:
        result = subprocess.run(
            [
                "docker",
                "ps",
                "-a",
            ] + filter_command,
        )



if __name__ == "__main__":
    main()